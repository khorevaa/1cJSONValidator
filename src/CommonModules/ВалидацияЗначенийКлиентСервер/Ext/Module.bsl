
#Область ПрограммныйИнтерфейс

//TODO: описание
Функция ПроверитьСоответствиеСхеме(Знач Схема, Знач Данные, Знач ФорматОтвета) Экспорт
		
	ПараметрыВалидации						= ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ПараметрыВалидации();
	ПараметрыВалидации.ТекущаяСхема			= ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.СформироватьСтруктуруПоJSON(Схема);
	ПараметрыВалидации.Значение				= ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.СформироватьСтруктуруПоJSON(Данные);
	ПараметрыВалидации.ПереданныеСвойства	= ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.КлючиКоллекцииКлючЗначение(ПараметрыВалидации.Значение);

	ПроверитьЭлемент(ПараметрыВалидации);	
	Результат = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ФорматированныйОтвет(ПараметрыВалидации.СписокОшибок, ФорматОтвета); 
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЭлемент(Знач ПараметрыВалидации)
	
	Если НЕ КорректныйТип(ПараметрыВалидации) Тогда
		
		Возврат;
	КонецЕсли;		
	
	СоответствиеТипов = ПараметрыВалидации.СоответствиеТипов;
	ТипДанных = СоответствиеТипов[ПараметрыВалидации.ТекущаяСхема["type"]];
	
	Если ТипДанных = СоответствиеТипов.string Тогда
	
		ПроверитьСтроку(ПараметрыВалидации);
	ИначеЕсли ТипДанных = СоответствиеТипов.object Тогда
		
		ПроверитьОбъект(ПараметрыВалидации);
	ИначеЕсли ТипДанных = СоответствиеТипов.integer
		ИЛИ ТипДанных = СоответствиеТипов.number Тогда
		
		ПроверитьЧисло(ПараметрыВалидации);
	ИначеЕсли ТипДанных = СоответствиеТипов.array Тогда
		
		ПроверитьМассив(ПараметрыВалидации);
	КонецЕсли;		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА МАССИВ

Процедура ПроверитьМассив(Знач ПараметрыВалидации)

	МинимальноеКоличествоЭлементов(ПараметрыВалидации);
	МаксимальноеКоличествоЭлементов(ПараметрыВалидации);
	УникальностьЭлементов(ПараметрыВалидации);
	
	ВсеЭлементыПодходящегоТипа(ПараметрыВалидации);
	ПервыйЭлементПодходящегоТипа(ПараметрыВалидации);	
КонецПроцедуры

Процедура ВсеЭлементыПодходящегоТипа(ПараметрыВалидации)

	СвойстваЭлементовМассива = ПараметрыВалидации.ТекущаяСхема.Получить("items");
	Если НЕ ЗначениеЗаполнено(СвойстваЭлементовМассива) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СвойстваЭлементовМассива) = Тип("Соответствие") Тогда
		
		ОграничениеТиповЭлементов(ПараметрыВалидации);
	ИначеЕсли  ТипЗнч(СвойстваЭлементовМассива) = Тип("Массив") Тогда
		
		ОграниченияКортежаТиповЭлементов(ПараметрыВалидации);		
	КонецЕсли;
КонецПроцедуры

Процедура ПервыйЭлементПодходящегоТипа(ПараметрыВалидации)

	СвойстваЭлементовМассива = ПараметрыВалидации.ТекущаяСхема.Получить("contains");
	Если НЕ ЗначениеЗаполнено(СвойстваЭлементовМассива) Тогда
		
		Возврат;
	КонецЕсли;	
	
	ОграничениеНаТип = СвойстваЭлементовМассива.Получить("type");
				
	ИмяСвойства = "contains";
	РазделительЭлементов = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.РазделительЭлементов(); 
	ТекущийУзел = ПараметрыВалидации.ТекущийУзел;
		
	КоличествоЗначений = ПараметрыВалидации.Значение.Количество();
	КоличествоКорректныхЭлементов = 0;
	СписокОшибок = Новый Массив;
	ЕстьКорректныйЭлемент = Ложь;
	Для каждого Элемент Из ПараметрыВалидации.Значение Цикл
		
		//1
		ПараметрыВалидацииЭлемента = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ПараметрыВалидации();
		ЗаполнитьЗначенияСвойств(ПараметрыВалидацииЭлемента, ПараметрыВалидации, ,"СписокОшибок");
		
		ПараметрыВалидацииЭлемента.ТекущийУзел = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3", ТекущийУзел, РазделительЭлементов, ИмяСвойства);
				
		ПараметрыВалидацииЭлемента.ТекущаяСхема	= СвойстваЭлементовМассива;
		ПараметрыВалидацииЭлемента.Значение		= Элемент;

		ПараметрыВалидацииЭлемента.ПереданныеСвойства =
			ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.КлючиКоллекцииКлючЗначение(Элемент);
		
		ПроверитьЭлемент(ПараметрыВалидацииЭлемента);
		
		Если ПараметрыВалидацииЭлемента.СписокОшибок.Количество() = 0 Тогда
			
			ЕстьКорректныйЭлемент = Истина;
			Прервать;
		Иначе
			
			Для каждого ЭлементСпискаОшибок Из ПараметрыВалидацииЭлемента.СписокОшибок Цикл
				
				СписокОшибок.Добавить(ЭлементСпискаОшибок);
			КонецЦикла;					
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьКорректныйЭлемент Тогда
		
		ОшибкиContains = Новый Структура("contains, errors", "Массив не содержит ни одного элемента с совпадающим типом", Новый Массив);
		Для каждого ЭлементСпискаОшибок Из СписокОшибок Цикл
			
			ОшибкиContains.errors.Добавить(ЭлементСпискаОшибок);	
		КонецЦикла;	
		
		ПараметрыВалидации.СписокОшибок.Добавить(ОшибкиContains);
	КонецЕсли;			
КонецПроцедуры

Процедура УникальностьЭлементов(ПараметрыВалидации)

	УникальностьЭлементов = ПараметрыВалидации.ТекущаяСхема.Получить("uniqueItems");
	Если ТипЗнч(УникальностьЭлементов) = Тип("Булево")
		И УникальностьЭлементов Тогда
	
		СписокЗначений = Новый Массив;
		
		Индекс = 0;
		Для каждого Элемент Из ПараметрыВалидации.Значение Цикл
			
			ЗначениеСтрокой = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.СформироватьJSONПоСтруктуре(Элемент);
		
			Если СписокЗначений.Найти(ЗначениеСтрокой) = Неопределено Тогда
				
				СписокЗначений.Добавить(ЗначениеСтрокой);
			Иначе
				
				ДобавитьОшибку(ПараметрыВалидации, "uniqueItems"
								, "Не уникальный элемент массива с индексом: %1"
								, ПредставлениеИндекса(Индекс));
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;				
КонецПроцедуры

Процедура МинимальноеКоличествоЭлементов(ПараметрыВалидации)

	ОрганичениеМинимальноеКоличествоЭлементов = ПараметрыВалидации.ТекущаяСхема.Получить("minItems");
	КоличествоЭлементов = ПараметрыВалидации.Значение.Количество();
	
	Если НЕ ТипЗнч(ОрганичениеМинимальноеКоличествоЭлементов) = Тип("Число") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если КоличествоЭлементов < ОрганичениеМинимальноеКоличествоЭлементов Тогда
		
		ДобавитьОшибку(ПараметрыВалидации, "minItems"
						, "Количество элементов массива: %1 - что меньше минимального количества: %2"
						, КоличествоЭлементов
						, ОрганичениеМинимальноеКоличествоЭлементов);
	КонецЕсли;			
КонецПроцедуры

Процедура МаксимальноеКоличествоЭлементов(ПараметрыВалидации)

	ОрганичениеМаксимальноеКоличествоЭлементов = ПараметрыВалидации.ТекущаяСхема.Получить("maxItems");
	КоличествоЭлементов = ПараметрыВалидации.Значение.Количество();
	
	Если НЕ ТипЗнч(ОрганичениеМаксимальноеКоличествоЭлементов) = Тип("Число") Тогда
		
		Возврат;
	КонецЕсли;	
	
	Если КоличествоЭлементов > ОрганичениеМаксимальноеКоличествоЭлементов Тогда
		
		ДобавитьОшибку(ПараметрыВалидации, "maxItems"
						, "Количество элементов массива: %1 - что больше максимального количества: %2"
						, КоличествоЭлементов
						, ОрганичениеМаксимальноеКоличествоЭлементов);
	КонецЕсли	
КонецПроцедуры

Процедура ОграничениеТиповЭлементов(ПараметрыВалидации)
	
	СвойстваЭлементовМассива = ПараметрыВалидации.ТекущаяСхема.Получить("items");
	ОграничениеНаТип = СвойстваЭлементовМассива.Получить("type");
	
	ИмяСвойства = "items";
	РазделительЭлементов = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.РазделительЭлементов(); 
	ТекущийУзел = ПараметрыВалидации.ТекущийУзел;
	Для каждого Элемент Из ПараметрыВалидации.Значение Цикл
		
		ПараметрыВалидацииЭлемента = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ПараметрыВалидации();
		ЗаполнитьЗначенияСвойств(ПараметрыВалидацииЭлемента, ПараметрыВалидации);
		
		ПараметрыВалидацииЭлемента.ТекущийУзел = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3", ТекущийУзел, РазделительЭлементов, ИмяСвойства); // todo Указывать номер элемента
			
		ПараметрыВалидацииЭлемента.ПереданныеСвойства = 
			ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.КлючиКоллекцииКлючЗначение(Элемент);
			
		ПараметрыВалидацииЭлемента.ТекущаяСхема	= СвойстваЭлементовМассива;
		ПараметрыВалидацииЭлемента.Значение		= Элемент;

		ПроверитьЭлемент(ПараметрыВалидацииЭлемента);		
	КонецЦикла;	
КонецПроцедуры

Процедура ОграниченияКортежаТиповЭлементов(ПараметрыВалидации)
	
	СвойстваЭлементовМассива = ПараметрыВалидации.ТекущаяСхема.Получить("items");
	ДополнительныеСвойства = ПараметрыВалидации.ТекущаяСхема.Получить("additionalItems");
	ВозможноНаличиеДополнительныхЭлементов = Истина;
	ОписаниеДополнительныхСвойств = Неопределено;			
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Соответствие") Тогда
		
		ОписаниеДополнительныхСвойств = ДополнительныеСвойства;
	ИначеЕсли ТипЗнч(ДополнительныеСвойства) = Тип("Булево") Тогда 	
		
		ВозможноНаличиеДополнительныхЭлементов = ДополнительныеСвойства;
	КонецЕсли;				
	
	РазделительЭлементов = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.РазделительЭлементов(); 
	КоличествоЭлементов = СвойстваЭлементовМассива.Количество();
	КоличествоЗначений = ПараметрыВалидации.Значение.Количество();
	ТекущийУзел = ПараметрыВалидации.ТекущийУзел;
	СписокОшибок = Новый Массив;
	ИмяСвойства = "items";
	
	Для Счетчик = 0 По КоличествоЭлементов - 1 Цикл
		
		ПараметрыВалидацииЭлемента = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ПараметрыВалидации();
		
		Если Счетчик < КоличествоЗначений Тогда 
			
			СхемаЭлемента = СвойстваЭлементовМассива[Счетчик];
			ЗначениеЭлемента = ПараметрыВалидации.Значение[Счетчик];
				
			ЗаполнитьЗначенияСвойств(ПараметрыВалидацииЭлемента, ПараметрыВалидации, ,"СписокОшибок");
			
			ПараметрыВалидацииЭлемента.ТекущийУзел = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4%5"
												, ТекущийУзел
												, РазделительЭлементов
												, ИмяСвойства
												, РазделительЭлементов
												, ПредставлениеИндекса(Счетчик));
				
			ПараметрыВалидацииЭлемента.ПереданныеСвойства = 
				ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.КлючиКоллекцииКлючЗначение(ЗначениеЭлемента);
					
			ПараметрыВалидацииЭлемента.ТекущаяСхема	= СхемаЭлемента;
			ПараметрыВалидацииЭлемента.Значение		= ЗначениеЭлемента;

			ПроверитьЭлемент(ПараметрыВалидацииЭлемента);
		КонецЕсли;
		
		Для каждого ЭлементСпискаОшибок Из ПараметрыВалидацииЭлемента.СписокОшибок Цикл
					
			СписокОшибок.Добавить(ЭлементСпискаОшибок);
		КонецЦикла;		
	КонецЦикла;
	
	ЕстьДополнительныеЭлементы = КоличествоЗначений > КоличествоЭлементов;
	
	Если ЕстьДополнительныеЭлементы Тогда
		
		ПровереноЭлементов = КоличествоЭлементов;
		
		Пока КоличествоЗначений > ПровереноЭлементов Цикл
			
			ЗначениеЭлемента = ПараметрыВалидации.Значение[ПровереноЭлементов];
			
			Если НЕ ВозможноНаличиеДополнительныхЭлементов Тогда
	
				ДобавитьОшибку(ПараметрыВалидации
								, "additionalItems"
								, "Лишний элемент с индексом: %1. Схема не допускает дополнительных элементов."
								, ПредставлениеИндекса(ПровереноЭлементов));
			Иначе
				
				Если ТипЗнч(ОписаниеДополнительныхСвойств) = Тип("Соответствие") Тогда
					
					ПараметрыВалидацииЭлемента = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ПараметрыВалидации();
					
					СхемаЭлемента = ОписаниеДополнительныхСвойств;
					
					ЗаполнитьЗначенияСвойств(ПараметрыВалидацииЭлемента, ПараметрыВалидации, ,"СписокОшибок");
					
					ПараметрыВалидацииЭлемента.ТекущийУзел = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4%5"
								, ТекущийУзел
								, РазделительЭлементов
								, "additionalItems"
								, РазделительЭлементов, ПредставлениеИндекса(ПровереноЭлементов));
						
					ПараметрыВалидацииЭлемента.ПереданныеСвойства = 
						ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.КлючиКоллекцииКлючЗначение(ЗначениеЭлемента);
							
					ПараметрыВалидацииЭлемента.ТекущаяСхема	= СхемаЭлемента;
					ПараметрыВалидацииЭлемента.Значение		= ЗначениеЭлемента;

					ПроверитьЭлемент(ПараметрыВалидацииЭлемента);
					
					Для каждого ЭлементСпискаОшибок Из ПараметрыВалидацииЭлемента.СписокОшибок Цикл
					
						СписокОшибок.Добавить(ЭлементСпискаОшибок);
					КонецЦикла;	
				КонецЕсли;							
			КонецЕсли;
			
			ПровереноЭлементов = ПровереноЭлементов + 1;
		КонецЦикла;
	КонецЕсли;				
	
	Если СписокОшибок.Количество() > 0 Тогда
		
		Для каждого ЭлементСпискаОшибок Из СписокОшибок Цикл
			
			ПараметрыВалидации.СписокОшибок.Добавить(ЭлементСпискаОшибок);
		КонецЦикла;
	КонецЕсли;					
КонецПроцедуры

Функция ПредставлениеИндекса(Знач Индекс)

	Результат = Формат(Индекс, "ЧН=0; ЧГ=0");	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЧИСЛО

Процедура ПроверитьЧисло(Знач ПараметрыВалидации)
		
	ТипЧисла(ПараметрыВалидации);		
	Кратность(ПараметрыВалидации);
	МинимальноеЗначениеЧисла(ПараметрыВалидации);
	МаксимальноеЗначениеЧисла(ПараметрыВалидации);
КонецПроцедуры

Процедура МинимальноеЗначениеЧисла(ПараметрыВалидации)

	ИмяЭлемента = "minimum";
	Значение				= ПараметрыВалидации.Значение;
	МинимальноеЗначение		= ПараметрыВалидации.ТекущаяСхема.Получить(ИмяЭлемента);
	ИсключительныйМинимум	= ПараметрыВалидации.ТекущаяСхема.Получить("exclusiveMinimum");

	ТекстОшибки = Неопределено;
	
	Если ТипЗнч(МинимальноеЗначение) = Тип("Число") Тогда
		
		Если Значение < МинимальноеЗначение Тогда
			
			ТекстОшибки = НСтр("ru = 'Число: %1 меньше минимально допустимого значения: %2.'");
			 
		ИначеЕсли Значение = МинимальноеЗначение 
				И ТипЗнч(ИсключительныйМинимум) = Тип("Булево")
				И ИсключительныйМинимум Тогда
			
			ТекстОшибки = НСтр("ru = 'Число: %1 равно минимальному значению %2, при включенном признаке исключительный минимум.'");
			
		КонецЕсли;			
	КонецЕсли;
	
	ДобавитьОшибку(ПараметрыВалидации, ИмяЭлемента, ТекстОшибки
					, Значение, МинимальноеЗначение);	
КонецПроцедуры

Процедура МаксимальноеЗначениеЧисла(ПараметрыВалидации)
	
	ИмяЭлемента = "maximum";
	
	Значение				= ПараметрыВалидации.Значение;
	МаксимальноеЗначение	= ПараметрыВалидации.ТекущаяСхема.Получить(ИмяЭлемента);
	ИсключительныйМаксимум	= ПараметрыВалидации.ТекущаяСхема.Получить("exclusiveMaximum");
	
	ТекстОшибки = Неопределено;
	
	Если ТипЗнч(МаксимальноеЗначение) = Тип("Число") Тогда
		
		Если Значение > МаксимальноеЗначение Тогда	
			
			ТекстОшибки = НСтр("ru = 'Число: %1 превышает максимально допустимое значение: %2.'");

		ИначеЕсли Значение = МаксимальноеЗначение 
				И ТипЗнч(ИсключительныйМаксимум) = Тип("Булево")
				И ИсключительныйМаксимум Тогда
			
			ТекстОшибки = НСтр("ru = 'Число: %1 равно максимальному значению %2, при включенном признаке исключительный максимум.'");

		КонецЕсли;	
	КонецЕсли;
	
	ДобавитьОшибку(ПараметрыВалидации, ИмяЭлемента, ТекстОшибки
					, Значение, МаксимальноеЗначение);
КонецПроцедуры

Процедура ТипЧисла(ПараметрыВалидации)
	
	ИмяЭлемента = "type";
	Значение = ПараметрыВалидации.Значение;
	
	ТекстОшибки = Неопределено;
	
	Если ПараметрыВалидации.ТекущаяСхема.Получить("type") = "integer"
		И НЕ ЦелоеЧисло(Значение) Тогда
		
		ТекстОшибки = НСтр("ru = 'Ожидается целое число.'");
		
	КонецЕсли;		
	
	ДобавитьОшибку(ПараметрыВалидации, ИмяЭлемента, ТекстОшибки);
КонецПроцедуры

Процедура Кратность(ПараметрыВалидации)

	ИмяЭлемента = "multipleOf";
	
	Значение = ПараметрыВалидации.Значение;
	Делитель = ПараметрыВалидации.ТекущаяСхема.Получить(ИмяЭлемента);
	
	ТекстОшибки = Неопределено;
	
	Если ТипЗнч(Делитель) = Тип("Число") 
		И Делитель > 0 
		И Значение % Делитель > 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Число: %1 не является кратным: %2.'");
				
	КонецЕсли;	
	
	ДобавитьОшибку(ПараметрыВалидации, ИмяЭлемента, ТекстОшибки, Значение, Делитель);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА СТРОКА

Процедура ПроверитьСтроку(Знач ПараметрыВалидации)
	
	ДлинаСтроки(ПараметрыВалидации);
	РегулярноеВыражение(ПараметрыВалидации);		
КонецПроцедуры

Процедура ДлинаСтроки(Знач ПараметрыВалидации)
	
	ЭлементМинимальнаяДлина = "minLength";
	ЭлементМаксимальнаяДлина = "maxLength";
	
	МинимальнаяДлина	= ПараметрыВалидации.ТекущаяСхема.Получить(ЭлементМинимальнаяДлина);
	МаксимальнаяДлина	= ПараметрыВалидации.ТекущаяСхема.Получить(ЭлементМаксимальнаяДлина);
	Значение			= ПараметрыВалидации.Значение;
	ДлинаЗначения		= СтрДлина(Значение);
	
	ТекстОшибки = Неопределено;
	РезультатВыражения = Неопределено;
	
	Если ТипЗнч(МинимальнаяДлина) = Тип("Число") И ДлинаЗначения < МинимальнаяДлина Тогда
		
		ЭлементСОшибкой = ЭлементМинимальнаяДлина;
		РезультатВыражения = Строка(МинимальнаяДлина - ДлинаЗначения); 
		ТекстОшибки = НСтр("ru = 'Длина строки ''%1'' меньше чем минимальная длина: %2, на количество символов: %3.'");
		
	ИначеЕсли ТипЗнч(МаксимальнаяДлина) = Тип("Число") И ДлинаЗначения > МаксимальнаяДлина Тогда		
		
		ЭлементСОшибкой = ЭлементМаксимальнаяДлина;
		РезультатВыражения = Строка(ДлинаЗначения - МаксимальнаяДлина); 
		ТекстОшибки = НСтр("ru = 'Длина строки ''%1'' больше чем максимальная длина: %2, на количество символов: %3.'");
		
	КонецЕсли;

	ДобавитьОшибку(ПараметрыВалидации, ЭлементСОшибкой, ТекстОшибки
					, Значение, ДлинаЗначения, РезультатВыражения);
КонецПроцедуры

Процедура РегулярноеВыражение(Знач ПараметрыВалидации)

	ИмяЭлемента = "pattern";
	ТекстОшибки = Неопределено;
	
	Значение = ПараметрыВалидации.Значение;
	
	Шаблон = ПараметрыВалидации.ТекущаяСхема.Получить(ИмяЭлемента);
	Если НЕ ТипЗнч(Шаблон) = Тип("Строка") Тогда
		
		Возврат;
	КонецЕсли;
		
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Pattern = Шаблон;
	
	Если НЕ RegExp.Test(Значение) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Строка ''%1'' не соответствует шаблону регулярного выражения: %2'");
		
	КонецЕсли;	                        	
	
	ДобавитьОшибку(ПараметрыВалидации, ИмяЭлемента, ТекстОшибки
					, Значение, Шаблон);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ОБЪЕКТ

Процедура ПроверитьОбъект(Знач ПараметрыВалидации)
	
	ОбязательныеСвойства(ПараметрыВалидации);
	РазделительЭлементов = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.РазделительЭлементов(); 
	
	Для каждого Элемент Из ПараметрыВалидации.ТекущаяСхема["properties"] Цикл
		
		ТекущийУзел = ПараметрыВалидации.ТекущийУзел;
		ИмяСвойства = Элемент.Ключ;			
		
		Если НЕ СвойствоПередано(ПараметрыВалидации.ПереданныеСвойства, ИмяСвойства) Тогда
			
			Продолжить;
		КонецЕсли;					
		
		ЗначениеСвойства = ПараметрыВалидации.Значение.Получить(ИмяСвойства);
		
		ПараметрыВалидацииСвойства = ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ПараметрыВалидации();
		ЗаполнитьЗначенияСвойств(ПараметрыВалидацииСвойства, ПараметрыВалидации); 
		
		ПараметрыВалидацииСвойства.ТекущийУзел = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3", ТекущийУзел, РазделительЭлементов, ИмяСвойства);
			
		ПараметрыВалидацииСвойства.ПереданныеСвойства =
			ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.КлючиКоллекцииКлючЗначение(ЗначениеСвойства);
			
		ПараметрыВалидацииСвойства.ТекущаяСхема	= Элемент.Значение;
		ПараметрыВалидацииСвойства.Значение		= ЗначениеСвойства;

		ПроверитьЭлемент(ПараметрыВалидацииСвойства);
	КонецЦикла;
КонецПроцедуры

Процедура ОбязательныеСвойства(Знач ПараметрыВалидации)

	ИмяЭлемента = "required";
	ТекстОшибки = Неопределено;
		
	ПереданныеСвойства		= ПараметрыВалидации.ПереданныеСвойства;
	ОбязательныеСвойства	= ПараметрыВалидации.ТекущаяСхема.Получить(ИмяЭлемента);
	ОтсутствующиеСвойства	= ОтсутствующиеСвойства(ПереданныеСвойства, ОбязательныеСвойства);
	
	ОтсутствующиеСвойстваКоличество = ОтсутствующиеСвойства.Количество();
	ОтсутствующиеСвойстваСтрока = "";
	Если ОтсутствующиеСвойстваКоличество > 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'В объекте отсутствуют обязательные свойства: %1.'");
		ОтсутствующиеСвойстваСтрока = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОтсутствующиеСвойства, ", ");
	КонецЕсли;	
	
	ДобавитьОшибку(ПараметрыВалидации, ИмяЭлемента, ТекстОшибки, ОтсутствующиеСвойстваСтрока);
КонецПроцедуры

Функция КорректныйТип(Знач ПараметрыВалидации)

	Результат = Истина;
	
	СвойстваСхемы = ПараметрыВалидации.ТекущаяСхема;
	ЗначениеСвойства = ПараметрыВалидации.Значение;
	
	ПолученныйТип = ТипЗнч(ЗначениеСвойства);
	ТипЗначенияПоСхеме = ТипЗначенияПоСхеме(СвойстваСхемы["type"]);
	
	Если НЕ ПолученныйТип = ТипЗначенияПоСхеме Тогда
		
		ТекстСообщения = НСтр("ru = 'Неверный тип. Ожидается: %1, получено %2.'");
		ДобавитьОшибку(ПараметрыВалидации, "", ТекстСообщения, Строка(ТипЗначенияПоСхеме), Строка(ПолученныйТип));	
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ТипЗначенияПоСхеме(Знач ТипJSON)

	Результат = Неопределено;
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("string", Тип("Строка"));
	СоответствиеТипов.Вставить("object", Тип("Соответствие"));
	СоответствиеТипов.Вставить("boolean", Тип("Булево"));
	СоответствиеТипов.Вставить("integer", Тип("Число"));
	СоответствиеТипов.Вставить("number", Тип("Число"));
	СоответствиеТипов.Вставить("array", Тип("Массив"));
	
	Результат = СоответствиеТипов.Получить(ТипJSON);
		
	Возврат Результат;
КонецФункции

Процедура ДобавитьОшибку(Знач ПараметрыВалидации, Знач ИмяЭлемента, Знач ТекстСообщения
					, Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено
					, Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено
					, Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
					
	Если ТекстСообщения = Неопределено Тогда
		
		Возврат;
	КонецЕсли;						
					
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения
																		, Параметр1, Параметр2, Параметр3
																		, Параметр4, Параметр5, Параметр6
																		, Параметр7, Параметр8, Параметр9);	
	
	ОбщиеПроцедурыФункцииВалидацииJSONКлиентСервер.ДобавитьСообщениеОбОшибке(ПараметрыВалидации.ТекущийУзел
																		, ИмяЭлемента
																		, ТекстСообщения
																		, ПараметрыВалидации.СписокОшибок);	
КонецПроцедуры

Функция ЦелоеЧисло(Знач Значение)

	Результат = Значение = Цел(Значение); 	
	Возврат Результат;
КонецФункции

Функция ОтсутствующиеСвойства(Знач ПереданныеСвойства, Знач ОбязательныеСвойства)
	
	Результат = Новый Массив;
	
	Для каждого Элемент Из ОбязательныеСвойства Цикл
		
		Если ПереданныеСвойства.Найти(Элемент) = Неопределено Тогда
			
			Результат.Добавить(Элемент);
		КонецЕсли;			
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СвойствоПередано(Знач СписокСвойств, Знач ИмяСвойства)

	Результат = ?(СписокСвойств.Найти(ИмяСвойства) = Неопределено, Ложь, Истина);	
	Возврат Результат;
КонецФункции

#КонецОбласти

